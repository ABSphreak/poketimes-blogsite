{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","Home","state","posts","axios","get","then","res","setState","data","slice","this","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","Rainbow","WrappedComponent","Math","floor","random","props","Contact","Post","match","params","post_id","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,sC,2LCwB5BC,EArBA,WACb,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,cAAb,cACA,wBAAIA,UAAU,SACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,UAAZ,UAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,YAAZ,gB,yCC8BGC,E,2MAxCbC,MAAQ,CACNC,MAAO,I,mFAGY,IAAD,OAClBC,IAAMC,IAAI,8CAA8CC,MAAK,SAAAC,GAC3D,EAAKC,SAAS,CACZL,MAAOI,EAAIE,KAAKC,MAAM,EAAG,W,+BAKrB,IACAP,EAAUQ,KAAKT,MAAfC,MACFS,EAAWT,EAAMU,OACrBV,EAAMW,KAAI,SAAAC,GACR,OACE,yBAAKhB,UAAU,YAAYiB,IAAKD,EAAKE,IACnC,yBAAKC,IAAKC,IAAUC,IAAI,aACxB,yBAAKrB,UAAU,gBACb,kBAAC,IAAD,CAAMC,GAAI,IAAMe,EAAKE,IACnB,0BAAMlB,UAAU,uBAAuBgB,EAAKM,QAE9C,2BAAIN,EAAKO,WAMjB,yBAAKvB,UAAU,UAAf,gBAEF,OACE,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,UAAd,QACCa,O,GAnCUW,aCeJC,EClBC,SAAAC,GACd,IAEM1B,EAFS,CAAC,MAAO,OAAQ,SAAU,OAAQ,QAAS,UAC/B2B,KAAKC,MAAsB,EAAhBD,KAAKE,WACX,QAEhC,OAAO,SAAAC,GACL,OACE,yBAAK9B,UAAWA,GACd,kBAAC0B,EAAqBI,KDUfL,EAjBD,WACZ,OACE,yBAAKzB,UAAU,aACb,wBAAIA,UAAU,UAAd,SACA,6cESS+B,EAdC,WACd,OACE,yBAAK/B,UAAU,aACb,wBAAIA,UAAU,UAAd,WACA,wQCwBSgC,E,2MA1Bb7B,MAAQ,CACNa,KAAM,M,mFAGa,IAAD,OACdE,EAAKN,KAAKkB,MAAMG,MAAMC,OAAOC,QACjC9B,IAAMC,IAAI,8CAAgDY,GAAIX,MAAK,SAAAC,GACjE,EAAKC,SAAS,CACZO,KAAMR,EAAIE,Y,+BAMd,IAAMM,EAAOJ,KAAKT,MAAMa,KACtB,yBAAKhB,UAAU,QACb,wBAAIA,UAAU,UAAUY,KAAKT,MAAMa,KAAKM,OACxC,2BAAIV,KAAKT,MAAMa,KAAKO,OAGtB,yBAAKvB,UAAU,UAAf,eAEF,OAAO,yBAAKA,UAAU,aAAagB,O,GAvBpBQ,aCuBJY,E,iLAhBX,OACE,kBAAC,IAAD,KACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWR,IAClC,kBAAC,IAAD,CAAOO,KAAK,YAAYC,UAAWP,W,GAV7BR,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.8add852f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"nav-wrapper red darken-3\">\r\n      <div className=\"container\">\r\n        <a className=\"brand-logo\">Poke'Times</a>\r\n        <ul className=\"right\">\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/about\">About</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/contact\">Contact</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pokeball from \"../pokeball.png\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"https://jsonplaceholder.typicode.com/posts\").then(res => {\r\n      this.setState({\r\n        posts: res.data.slice(0, 10)\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.state;\r\n    const postList = posts.length ? (\r\n      posts.map(post => {\r\n        return (\r\n          <div className=\"post card\" key={post.id}>\r\n            <img src={Pokeball} alt=\"pokeball\" />\r\n            <div className=\"card-content\">\r\n              <Link to={\"/\" + post.id}>\r\n                <span className=\"card-title red-text\">{post.title}</span>\r\n              </Link>\r\n              <p>{post.body}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      })\r\n    ) : (\r\n      <div className=\"center\">No posts yet</div>\r\n    );\r\n    return (\r\n      <div className=\"container home\">\r\n        <h4 className=\"center\">Home</h4>\r\n        {postList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Rainbow from \"../hoc/Rainbow\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h4 className=\"center\">About</h4>\r\n      <p>\r\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae,\r\n        sint suscipit corporis numquam quibusdam qui illo libero, praesentium\r\n        aperiam aspernatur maiores commodi error quos minus earum inventore\r\n        voluptatibus soluta fugit, voluptas minima. Accusamus sequi eveniet\r\n        exercitationem iure nostrum dolore, quam magni suscipit, enim magnam\r\n        eligendi impedit natus! Praesentium amet, impedit alias sint laborum\r\n        repellendus.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rainbow(About);\r\n","import React from \"react\";\r\n\r\nconst Rainbow = WrappedComponent => {\r\n  const colors = [\"red\", \"pink\", \"orange\", \"blue\", \"green\", \"yellow\"];\r\n  const randomColor = colors[Math.floor(Math.random() * 5)];\r\n  const className = randomColor + \"-text\";\r\n\r\n  return props => {\r\n    return (\r\n      <div className={className}>\r\n        <WrappedComponent {...props} />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Rainbow;\r\n","import React from \"react\";\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h4 className=\"center\">Contact</h4>\r\n      <p>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\r\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\r\n        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\r\n        commodo consequat.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Post extends Component {\r\n  state = {\r\n    post: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    let id = this.props.match.params.post_id;\r\n    axios.get(\"https://jsonplaceholder.typicode.com/posts/\" + id).then(res => {\r\n      this.setState({\r\n        post: res.data\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const post = this.state.post ? (\r\n      <div className=\"post\">\r\n        <h4 className=\"center\">{this.state.post.title}</h4>\r\n        <p>{this.state.post.body}</p>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading ...</div>\r\n    );\r\n    return <div className=\"container\">{post}</div>;\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Post from \"./components/Post\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/contact\" component={Contact} />\n            <Route path=\"/:post_id\" component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}